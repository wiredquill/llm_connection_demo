# .github/workflows/ci-cd.yaml
name: Build, Push, and Update K8s Manifests (upstream & SUSE)

on:
  push:
    branches:
      - open-webui # Or your primary branch, e.g., master
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write   # Required to write back the updated K8s manifest to the repo
  packages: write   # Required to publish a container to GitHub Packages (GHCR)

jobs:
  build-push-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for committing manifest changes

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image tag
        id: image_meta
        run: |
          TAG=$(echo $GITHUB_SHA | cut -c1-7)
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
          echo "Generated tag: $TAG"
          # Define base image names for clarity
          echo "BASE_IMAGE_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo "SUSE_IMAGE_NAME=${{ github.event.repository.name }}-suse" >> $GITHUB_ENV

      # --- Build and Push upstream Image ---
      - name: Build and push upstream Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: app/Dockerfile.upstream # Path to your upstream Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.BASE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ghcr.io/${{ github.repository_owner }}/${{ env.BASE_IMAGE_NAME }}:latest
          # platforms: linux/amd64,linux/arm64 # Build for multiple Platforms
          platforms: linux/amd64 # Linux Only
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # platforms: linux/amd64,linux/arm64 # Optional

      # --- Build and Push SUSE Image ---
      - name: Build and push SUSE Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: app/Dockerfile.suse # Path to your SUSE Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.SUSE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ghcr.io/${{ github.repository_owner }}/${{ env.SUSE_IMAGE_NAME }}:latest
          # platforms: linux/amd64,linux/arm64 # Build for multiple Platforms
          platforms: linux/amd64 # Linux Only
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          yq --version

      # --- Update upstream Kubernetes Manifest ---
      - name: Update upstream Kubernetes deployment manifest
        env:
          # IMPORTANT: Adjust this path to your upstream K8s deployment YAML
          MANIFEST_PATH_UPSTREAM: "fleet/upstream/31-deployment-llm-chat.yaml" 
          NEW_IMAGE_UPSTREAM: "ghcr.io/${{ github.repository_owner }}/${{ env.BASE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
        run: |
          echo "Updating upstream manifest file: $MANIFEST_PATH_UPSTREAM"
          echo "Setting upstream image to: $NEW_IMAGE_UPSTREAM"
          if [ ! -f "$MANIFEST_PATH_UPSTREAM" ]; then
            echo "Error: Standard manifest file $MANIFEST_PATH_UPSTREAM not found!"
            exit 1
          fi
          # Adjust the yq path '.spec.template.spec.containers[0].image' if your image is in a different location
          yq eval '.spec.template.spec.containers[0].image = strenv(NEW_IMAGE_UPSTREAM)' -i "$MANIFEST_PATH_UPSTREAM"
          echo "Standard manifest file updated:"
          cat "$MANIFEST_PATH_UPSTREAM"

      # --- Update SUSE Kubernetes Manifest ---
      - name: Update SUSE Kubernetes deployment manifest
        env:
          # IMPORTANT: Adjust this path to your SUSE K8s deployment YAML
          MANIFEST_PATH_SUSE: "fleet/suse/31-deployment-llm-chat.yaml" 
          NEW_IMAGE_SUSE: "ghcr.io/${{ github.repository_owner }}/${{ env.SUSE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
        run: |
          echo "Updating SUSE manifest file: $MANIFEST_PATH_SUSE"
          echo "Setting SUSE image to: $NEW_IMAGE_SUSE"
          if [ ! -f "$MANIFEST_PATH_SUSE" ]; then
            echo "Error: SUSE manifest file $MANIFEST_PATH_SUSE not found!"
            exit 1
          fi
          # Adjust the yq path '.spec.template.spec.containers[0].image' if your image is in a different location
          yq eval '.spec.template.spec.containers[0].image = strenv(NEW_IMAGE_SUSE)' -i "$MANIFEST_PATH_SUSE"
          echo "SUSE manifest file updated:"
          cat "$MANIFEST_PATH_SUSE"

      - name: Commit and push updated manifests
        env:
          # Ensure these paths match the MANIFEST_PATH variables used above
          MANIFEST_PATH_UPSTREAM: "fleet/upstream/31-deployment-llm-chat.yaml"
          MANIFEST_PATH_SUSE: "fleet/suse/31-deployment-llm-chat.yaml"
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Add both manifest files
          git add "$MANIFEST_PATH_UPSTREAM" "$MANIFEST_PATH_SUSE"
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit in manifest files."
          else
            git commit -m "CI: Update image tags to ${{ env.IMAGE_TAG }} for upstream and SUSE deployments"
            git push
            echo "Pushed updated manifests to repository."
          fi
